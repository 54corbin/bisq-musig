syntax = "proto3";

package bmp_protocol;

import "google/protobuf/empty.proto";

// Service that wraps the BMPProtocol from the 'protocol' crate.
// It is stateful and manages the lifecycle of a trade via a trade_id.
service BmpProtocolService {
  // Creates a new BMPProtocol instance on the server.
  rpc Initialize(InitializeRequest) returns (InitializeResponse);

  rpc ExecuteRound1(Round1Request) returns (Round1Response);

  rpc ExecuteRound2(Round2Request) returns (Round2Response);

  rpc ExecuteRound3(Round3Request) returns (Round3Response);

  rpc ExecuteRound4(Round4Request) returns (Round4Response);
  
  rpc ExecuteRound5(Round5Request) returns (google.protobuf.Empty);
}

// === Messages ===

enum Role {
  SELLER = 0;
  BUYER = 1;
}

message InitializeRequest {
  string trade_id = 1;
  Role role = 2;
  uint64 seller_amount_sats = 3;
  uint64 buyer_amount_sats = 4;
}

message InitializeResponse { string trade_id = 1; }

message Round1Request { string trade_id = 1; }

message Round1Response {
  bytes p_a = 1;                   // Corresponds to musig2::secp::Point
  bytes q_a = 2;                   // Corresponds to musig2::secp::Point
  bytes dep_part_psbt = 3;         // Corresponds to bdk_wallet::bitcoin::Psbt
  optional bytes swap_script = 4;  // Optional ScriptBuf
  bytes warn_anchor_spend = 5;     // ScriptBuf
  bytes claim_spend = 6;           // ScriptBuf
  bytes redirect_anchor_spend = 7; // ScriptBuf
}

message Round2Request {
  string trade_id = 1;
  Round1Response peer_round1_response = 2;
}

message Round2Response {
  bytes p_agg = 1;                 // Point
  bytes q_agg = 2;                 // Point
  bytes swap_pub_nonce = 3;        // musig2::PubNonce
  bytes warn_alice_p_nonce = 4;    // PubNonce
  bytes warn_alice_q_nonce = 5;    // PubNonce
  bytes warn_bob_p_nonce = 6;      // PubNonce
  bytes warn_bob_q_nonce = 7;      // PubNonce
  bytes claim_alice_nonce = 8;     // PubNonce
  bytes claim_bob_nonce = 9;      // PubNonce
  bytes redirect_alice_nonce = 10; // PubNonce
  bytes redirect_bob_nonce = 11;   // PubNonce
}

message Round3Request {
  string trade_id = 1;
  Round2Response peer_round2_response = 2;
}

message Round3Response {
  bytes deposit_txid = 1;      // bdk_wallet::bitcoin::Txid
  bytes swap_part_sig = 2;     // musig2::PartialSignature
  bytes p_part_peer = 3;       // PartialSignature
  bytes q_part_peer = 4;       // PartialSignature
  bytes claim_part_sig = 5;    // PartialSignature
  bytes redirect_part_sig = 6; // PartialSignature
}

message Round4Request {
  string trade_id = 1;
  Round3Response peer_round3_response = 2;
}

message Round4Response {
    bytes deposit_tx_signed = 1;
}

message Round5Request {
    string trade_id = 1;
    Round4Response peer_round4_response = 2;
}
